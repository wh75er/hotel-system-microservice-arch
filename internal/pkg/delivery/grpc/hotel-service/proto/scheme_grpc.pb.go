// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	commonProto "hotel-booking-system/internal/pkg/delivery/grpc/commonProto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HotelServiceClient is the client API for HotelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HotelServiceClient interface {
	GetToken(ctx context.Context, in *commonProto.Credentials, opts ...grpc.CallOption) (*commonProto.Token, error)
	AddHotel(ctx context.Context, in *Hotel, opts ...grpc.CallOption) (*commonProto.Empty, error)
	GetHotel(ctx context.Context, in *commonProto.UUID, opts ...grpc.CallOption) (*Hotel, error)
	GetHotels(ctx context.Context, in *commonProto.Empty, opts ...grpc.CallOption) (*HotelsResponse, error)
	PatchHotel(ctx context.Context, in *Hotel, opts ...grpc.CallOption) (*commonProto.Empty, error)
	DeleteHotel(ctx context.Context, in *commonProto.UUID, opts ...grpc.CallOption) (*commonProto.Empty, error)
	AddRoom(ctx context.Context, in *Room, opts ...grpc.CallOption) (*commonProto.Empty, error)
	GetRooms(ctx context.Context, in *commonProto.UUID, opts ...grpc.CallOption) (*RoomsResponse, error)
	GetRoom(ctx context.Context, in *commonProto.UUID, opts ...grpc.CallOption) (*Room, error)
	TakeRoom(ctx context.Context, in *commonProto.UUID, opts ...grpc.CallOption) (*commonProto.Empty, error)
	DismissRoom(ctx context.Context, in *commonProto.UUID, opts ...grpc.CallOption) (*commonProto.Empty, error)
	PatchRoom(ctx context.Context, in *Room, opts ...grpc.CallOption) (*commonProto.Empty, error)
	DeleteRoom(ctx context.Context, in *commonProto.UUID, opts ...grpc.CallOption) (*commonProto.Empty, error)
}

type hotelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHotelServiceClient(cc grpc.ClientConnInterface) HotelServiceClient {
	return &hotelServiceClient{cc}
}

func (c *hotelServiceClient) GetToken(ctx context.Context, in *commonProto.Credentials, opts ...grpc.CallOption) (*commonProto.Token, error) {
	out := new(commonProto.Token)
	err := c.cc.Invoke(ctx, "/proto.HotelService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) AddHotel(ctx context.Context, in *Hotel, opts ...grpc.CallOption) (*commonProto.Empty, error) {
	out := new(commonProto.Empty)
	err := c.cc.Invoke(ctx, "/proto.HotelService/AddHotel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) GetHotel(ctx context.Context, in *commonProto.UUID, opts ...grpc.CallOption) (*Hotel, error) {
	out := new(Hotel)
	err := c.cc.Invoke(ctx, "/proto.HotelService/GetHotel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) GetHotels(ctx context.Context, in *commonProto.Empty, opts ...grpc.CallOption) (*HotelsResponse, error) {
	out := new(HotelsResponse)
	err := c.cc.Invoke(ctx, "/proto.HotelService/GetHotels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) PatchHotel(ctx context.Context, in *Hotel, opts ...grpc.CallOption) (*commonProto.Empty, error) {
	out := new(commonProto.Empty)
	err := c.cc.Invoke(ctx, "/proto.HotelService/PatchHotel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) DeleteHotel(ctx context.Context, in *commonProto.UUID, opts ...grpc.CallOption) (*commonProto.Empty, error) {
	out := new(commonProto.Empty)
	err := c.cc.Invoke(ctx, "/proto.HotelService/DeleteHotel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) AddRoom(ctx context.Context, in *Room, opts ...grpc.CallOption) (*commonProto.Empty, error) {
	out := new(commonProto.Empty)
	err := c.cc.Invoke(ctx, "/proto.HotelService/AddRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) GetRooms(ctx context.Context, in *commonProto.UUID, opts ...grpc.CallOption) (*RoomsResponse, error) {
	out := new(RoomsResponse)
	err := c.cc.Invoke(ctx, "/proto.HotelService/GetRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) GetRoom(ctx context.Context, in *commonProto.UUID, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/proto.HotelService/GetRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) TakeRoom(ctx context.Context, in *commonProto.UUID, opts ...grpc.CallOption) (*commonProto.Empty, error) {
	out := new(commonProto.Empty)
	err := c.cc.Invoke(ctx, "/proto.HotelService/TakeRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) DismissRoom(ctx context.Context, in *commonProto.UUID, opts ...grpc.CallOption) (*commonProto.Empty, error) {
	out := new(commonProto.Empty)
	err := c.cc.Invoke(ctx, "/proto.HotelService/DismissRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) PatchRoom(ctx context.Context, in *Room, opts ...grpc.CallOption) (*commonProto.Empty, error) {
	out := new(commonProto.Empty)
	err := c.cc.Invoke(ctx, "/proto.HotelService/PatchRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) DeleteRoom(ctx context.Context, in *commonProto.UUID, opts ...grpc.CallOption) (*commonProto.Empty, error) {
	out := new(commonProto.Empty)
	err := c.cc.Invoke(ctx, "/proto.HotelService/DeleteRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotelServiceServer is the server API for HotelService service.
// All implementations must embed UnimplementedHotelServiceServer
// for forward compatibility
type HotelServiceServer interface {
	GetToken(context.Context, *commonProto.Credentials) (*commonProto.Token, error)
	AddHotel(context.Context, *Hotel) (*commonProto.Empty, error)
	GetHotel(context.Context, *commonProto.UUID) (*Hotel, error)
	GetHotels(context.Context, *commonProto.Empty) (*HotelsResponse, error)
	PatchHotel(context.Context, *Hotel) (*commonProto.Empty, error)
	DeleteHotel(context.Context, *commonProto.UUID) (*commonProto.Empty, error)
	AddRoom(context.Context, *Room) (*commonProto.Empty, error)
	GetRooms(context.Context, *commonProto.UUID) (*RoomsResponse, error)
	GetRoom(context.Context, *commonProto.UUID) (*Room, error)
	TakeRoom(context.Context, *commonProto.UUID) (*commonProto.Empty, error)
	DismissRoom(context.Context, *commonProto.UUID) (*commonProto.Empty, error)
	PatchRoom(context.Context, *Room) (*commonProto.Empty, error)
	DeleteRoom(context.Context, *commonProto.UUID) (*commonProto.Empty, error)
	mustEmbedUnimplementedHotelServiceServer()
}

// UnimplementedHotelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHotelServiceServer struct {
}

func (UnimplementedHotelServiceServer) GetToken(context.Context, *commonProto.Credentials) (*commonProto.Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedHotelServiceServer) AddHotel(context.Context, *Hotel) (*commonProto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHotel not implemented")
}
func (UnimplementedHotelServiceServer) GetHotel(context.Context, *commonProto.UUID) (*Hotel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotel not implemented")
}
func (UnimplementedHotelServiceServer) GetHotels(context.Context, *commonProto.Empty) (*HotelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotels not implemented")
}
func (UnimplementedHotelServiceServer) PatchHotel(context.Context, *Hotel) (*commonProto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchHotel not implemented")
}
func (UnimplementedHotelServiceServer) DeleteHotel(context.Context, *commonProto.UUID) (*commonProto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHotel not implemented")
}
func (UnimplementedHotelServiceServer) AddRoom(context.Context, *Room) (*commonProto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoom not implemented")
}
func (UnimplementedHotelServiceServer) GetRooms(context.Context, *commonProto.UUID) (*RoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRooms not implemented")
}
func (UnimplementedHotelServiceServer) GetRoom(context.Context, *commonProto.UUID) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedHotelServiceServer) TakeRoom(context.Context, *commonProto.UUID) (*commonProto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeRoom not implemented")
}
func (UnimplementedHotelServiceServer) DismissRoom(context.Context, *commonProto.UUID) (*commonProto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DismissRoom not implemented")
}
func (UnimplementedHotelServiceServer) PatchRoom(context.Context, *Room) (*commonProto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRoom not implemented")
}
func (UnimplementedHotelServiceServer) DeleteRoom(context.Context, *commonProto.UUID) (*commonProto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedHotelServiceServer) mustEmbedUnimplementedHotelServiceServer() {}

// UnsafeHotelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotelServiceServer will
// result in compilation errors.
type UnsafeHotelServiceServer interface {
	mustEmbedUnimplementedHotelServiceServer()
}

func RegisterHotelServiceServer(s grpc.ServiceRegistrar, srv HotelServiceServer) {
	s.RegisterService(&HotelService_ServiceDesc, srv)
}

func _HotelService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonProto.Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HotelService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetToken(ctx, req.(*commonProto.Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_AddHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hotel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).AddHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HotelService/AddHotel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).AddHotel(ctx, req.(*Hotel))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_GetHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonProto.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HotelService/GetHotel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetHotel(ctx, req.(*commonProto.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_GetHotels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonProto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetHotels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HotelService/GetHotels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetHotels(ctx, req.(*commonProto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_PatchHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hotel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).PatchHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HotelService/PatchHotel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).PatchHotel(ctx, req.(*Hotel))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_DeleteHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonProto.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).DeleteHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HotelService/DeleteHotel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).DeleteHotel(ctx, req.(*commonProto.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_AddRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Room)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).AddRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HotelService/AddRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).AddRoom(ctx, req.(*Room))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_GetRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonProto.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HotelService/GetRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetRooms(ctx, req.(*commonProto.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonProto.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HotelService/GetRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetRoom(ctx, req.(*commonProto.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_TakeRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonProto.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).TakeRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HotelService/TakeRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).TakeRoom(ctx, req.(*commonProto.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_DismissRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonProto.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).DismissRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HotelService/DismissRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).DismissRoom(ctx, req.(*commonProto.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_PatchRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Room)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).PatchRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HotelService/PatchRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).PatchRoom(ctx, req.(*Room))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonProto.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HotelService/DeleteRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).DeleteRoom(ctx, req.(*commonProto.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

// HotelService_ServiceDesc is the grpc.ServiceDesc for HotelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HotelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HotelService",
	HandlerType: (*HotelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _HotelService_GetToken_Handler,
		},
		{
			MethodName: "AddHotel",
			Handler:    _HotelService_AddHotel_Handler,
		},
		{
			MethodName: "GetHotel",
			Handler:    _HotelService_GetHotel_Handler,
		},
		{
			MethodName: "GetHotels",
			Handler:    _HotelService_GetHotels_Handler,
		},
		{
			MethodName: "PatchHotel",
			Handler:    _HotelService_PatchHotel_Handler,
		},
		{
			MethodName: "DeleteHotel",
			Handler:    _HotelService_DeleteHotel_Handler,
		},
		{
			MethodName: "AddRoom",
			Handler:    _HotelService_AddRoom_Handler,
		},
		{
			MethodName: "GetRooms",
			Handler:    _HotelService_GetRooms_Handler,
		},
		{
			MethodName: "GetRoom",
			Handler:    _HotelService_GetRoom_Handler,
		},
		{
			MethodName: "TakeRoom",
			Handler:    _HotelService_TakeRoom_Handler,
		},
		{
			MethodName: "DismissRoom",
			Handler:    _HotelService_DismissRoom_Handler,
		},
		{
			MethodName: "PatchRoom",
			Handler:    _HotelService_PatchRoom_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _HotelService_DeleteRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/pkg/delivery/grpc/hotel-service/proto/scheme.proto",
}
