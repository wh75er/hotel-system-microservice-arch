// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	commonProto "hotel-booking-system/internal/pkg/delivery/grpc/commonProto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoyaltyServiceClient is the client API for LoyaltyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoyaltyServiceClient interface {
	GetToken(ctx context.Context, in *commonProto.Credentials, opts ...grpc.CallOption) (*commonProto.Token, error)
	GetDiscount(ctx context.Context, in *commonProto.UUID, opts ...grpc.CallOption) (*Loyalty, error)
	AddUser(ctx context.Context, in *commonProto.UUID, opts ...grpc.CallOption) (*commonProto.Empty, error)
	UpdateDiscount(ctx context.Context, in *UpdateDiscountRequest, opts ...grpc.CallOption) (*commonProto.Empty, error)
}

type loyaltyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoyaltyServiceClient(cc grpc.ClientConnInterface) LoyaltyServiceClient {
	return &loyaltyServiceClient{cc}
}

func (c *loyaltyServiceClient) GetToken(ctx context.Context, in *commonProto.Credentials, opts ...grpc.CallOption) (*commonProto.Token, error) {
	out := new(commonProto.Token)
	err := c.cc.Invoke(ctx, "/proto.LoyaltyService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) GetDiscount(ctx context.Context, in *commonProto.UUID, opts ...grpc.CallOption) (*Loyalty, error) {
	out := new(Loyalty)
	err := c.cc.Invoke(ctx, "/proto.LoyaltyService/GetDiscount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) AddUser(ctx context.Context, in *commonProto.UUID, opts ...grpc.CallOption) (*commonProto.Empty, error) {
	out := new(commonProto.Empty)
	err := c.cc.Invoke(ctx, "/proto.LoyaltyService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) UpdateDiscount(ctx context.Context, in *UpdateDiscountRequest, opts ...grpc.CallOption) (*commonProto.Empty, error) {
	out := new(commonProto.Empty)
	err := c.cc.Invoke(ctx, "/proto.LoyaltyService/UpdateDiscount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoyaltyServiceServer is the server API for LoyaltyService service.
// All implementations must embed UnimplementedLoyaltyServiceServer
// for forward compatibility
type LoyaltyServiceServer interface {
	GetToken(context.Context, *commonProto.Credentials) (*commonProto.Token, error)
	GetDiscount(context.Context, *commonProto.UUID) (*Loyalty, error)
	AddUser(context.Context, *commonProto.UUID) (*commonProto.Empty, error)
	UpdateDiscount(context.Context, *UpdateDiscountRequest) (*commonProto.Empty, error)
	mustEmbedUnimplementedLoyaltyServiceServer()
}

// UnimplementedLoyaltyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLoyaltyServiceServer struct {
}

func (UnimplementedLoyaltyServiceServer) GetToken(context.Context, *commonProto.Credentials) (*commonProto.Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedLoyaltyServiceServer) GetDiscount(context.Context, *commonProto.UUID) (*Loyalty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscount not implemented")
}
func (UnimplementedLoyaltyServiceServer) AddUser(context.Context, *commonProto.UUID) (*commonProto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedLoyaltyServiceServer) UpdateDiscount(context.Context, *UpdateDiscountRequest) (*commonProto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDiscount not implemented")
}
func (UnimplementedLoyaltyServiceServer) mustEmbedUnimplementedLoyaltyServiceServer() {}

// UnsafeLoyaltyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoyaltyServiceServer will
// result in compilation errors.
type UnsafeLoyaltyServiceServer interface {
	mustEmbedUnimplementedLoyaltyServiceServer()
}

func RegisterLoyaltyServiceServer(s grpc.ServiceRegistrar, srv LoyaltyServiceServer) {
	s.RegisterService(&LoyaltyService_ServiceDesc, srv)
}

func _LoyaltyService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonProto.Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LoyaltyService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).GetToken(ctx, req.(*commonProto.Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_GetDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonProto.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).GetDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LoyaltyService/GetDiscount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).GetDiscount(ctx, req.(*commonProto.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonProto.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LoyaltyService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).AddUser(ctx, req.(*commonProto.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_UpdateDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).UpdateDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LoyaltyService/UpdateDiscount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).UpdateDiscount(ctx, req.(*UpdateDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoyaltyService_ServiceDesc is the grpc.ServiceDesc for LoyaltyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoyaltyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LoyaltyService",
	HandlerType: (*LoyaltyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _LoyaltyService_GetToken_Handler,
		},
		{
			MethodName: "GetDiscount",
			Handler:    _LoyaltyService_GetDiscount_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _LoyaltyService_AddUser_Handler,
		},
		{
			MethodName: "UpdateDiscount",
			Handler:    _LoyaltyService_UpdateDiscount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/pkg/delivery/grpc/loyalty-service/proto/scheme.proto",
}
