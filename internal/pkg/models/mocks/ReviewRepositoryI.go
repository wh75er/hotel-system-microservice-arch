// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	models "hotel-booking-system/internal/pkg/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ReviewRepositoryI is an autogenerated mock type for the ReviewRepositoryI type
type ReviewRepositoryI struct {
	mock.Mock
}

// AddReview provides a mock function with given fields: r
func (_m *ReviewRepositoryI) AddReview(r *models.Review) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Review) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReview provides a mock function with given fields: reviewUuid
func (_m *ReviewRepositoryI) DeleteReview(reviewUuid uuid.UUID) error {
	ret := _m.Called(reviewUuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(reviewUuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetReview provides a mock function with given fields: reviewUuid
func (_m *ReviewRepositoryI) GetReview(reviewUuid uuid.UUID) (models.Review, error) {
	ret := _m.Called(reviewUuid)

	var r0 models.Review
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.Review); ok {
		r0 = rf(reviewUuid)
	} else {
		r0 = ret.Get(0).(models.Review)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(reviewUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReviews provides a mock function with given fields: hotelUuid
func (_m *ReviewRepositoryI) GetReviews(hotelUuid uuid.UUID) ([]models.Review, error) {
	ret := _m.Called(hotelUuid)

	var r0 []models.Review
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.Review); ok {
		r0 = rf(hotelUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(hotelUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchReview provides a mock function with given fields: r
func (_m *ReviewRepositoryI) PatchReview(r *models.Review) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Review) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
