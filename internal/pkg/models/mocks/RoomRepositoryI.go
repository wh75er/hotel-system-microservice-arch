// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	models "hotel-booking-system/internal/pkg/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// RoomRepositoryI is an autogenerated mock type for the RoomRepositoryI type
type RoomRepositoryI struct {
	mock.Mock
}

// AddRoom provides a mock function with given fields: room
func (_m *RoomRepositoryI) AddRoom(room *models.Room) error {
	ret := _m.Called(room)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Room) error); ok {
		r0 = rf(room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRoom provides a mock function with given fields: roomUuid
func (_m *RoomRepositoryI) DeleteRoom(roomUuid uuid.UUID) error {
	ret := _m.Called(roomUuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(roomUuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRoom provides a mock function with given fields: roomUuid
func (_m *RoomRepositoryI) GetRoom(roomUuid uuid.UUID) (models.Room, error) {
	ret := _m.Called(roomUuid)

	var r0 models.Room
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.Room); ok {
		r0 = rf(roomUuid)
	} else {
		r0 = ret.Get(0).(models.Room)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(roomUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRooms provides a mock function with given fields: hotelUuid
func (_m *RoomRepositoryI) GetRooms(hotelUuid uuid.UUID) ([]models.Room, error) {
	ret := _m.Called(hotelUuid)

	var r0 []models.Room
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.Room); ok {
		r0 = rf(hotelUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Room)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(hotelUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchRoom provides a mock function with given fields: room
func (_m *RoomRepositoryI) PatchRoom(room *models.Room) error {
	ret := _m.Called(room)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Room) error); ok {
		r0 = rf(room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
