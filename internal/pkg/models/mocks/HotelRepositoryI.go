// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	models "hotel-booking-system/internal/pkg/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// HotelRepositoryI is an autogenerated mock type for the HotelRepositoryI type
type HotelRepositoryI struct {
	mock.Mock
}

// AddHotel provides a mock function with given fields: h
func (_m *HotelRepositoryI) AddHotel(h *models.Hotel) error {
	ret := _m.Called(h)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Hotel) error); ok {
		r0 = rf(h)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteHotel provides a mock function with given fields: hotelUuid
func (_m *HotelRepositoryI) DeleteHotel(hotelUuid uuid.UUID) error {
	ret := _m.Called(hotelUuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(hotelUuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetHotel provides a mock function with given fields: hotelUuid
func (_m *HotelRepositoryI) GetHotel(hotelUuid uuid.UUID) (models.Hotel, error) {
	ret := _m.Called(hotelUuid)

	var r0 models.Hotel
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.Hotel); ok {
		r0 = rf(hotelUuid)
	} else {
		r0 = ret.Get(0).(models.Hotel)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(hotelUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHotels provides a mock function with given fields:
func (_m *HotelRepositoryI) GetHotels() ([]models.Hotel, error) {
	ret := _m.Called()

	var r0 []models.Hotel
	if rf, ok := ret.Get(0).(func() []models.Hotel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Hotel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchHotel provides a mock function with given fields: h
func (_m *HotelRepositoryI) PatchHotel(h *models.Hotel) error {
	ret := _m.Called(h)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Hotel) error); ok {
		r0 = rf(h)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
